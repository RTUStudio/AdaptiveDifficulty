plugins {
    id "java"
    id "io.freefair.lombok" version "8.14.2"
    id "com.gradleup.shadow" version "9.0.2"
    id "xyz.jpenilla.run-paper" version "3.0.0-beta.1"
}

version = project.plugin_version

runServer {
    minecraftVersion(bukkit_version)
    downloadPlugins {
        url "https://ci.codemc.io/job/RTUServer/job/RSFramework/lastSuccessfulBuild/artifact/builds/plugin/RSFramework-${rsf_version}.jar"
    }
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }

    maven {
        name = "SpigotMC"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "PaperMC"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "Sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }

    maven { url "https://repo.codemc.io/repository/rtuserver/" } // RSFramework

    maven { url "https://repo.extendedclip.com/content/repositories/placeholderapi/" } // PlaceholderAPI
    maven { url "https://repo.dmulloy2.net/repository/public/" } // ProtocolLib
}


dependencies {
    // Plugin API
    def plugin_api = paper_plugin ? "io.papermc.paper:paper-api:${api_version}-R0.1-SNAPSHOT" : "org.spigotmc:spigot-api:${api_version}-R0.1-SNAPSHOT"
    compileOnly plugin_api

    // RSFramework
    compileOnly "kr.rtuserver:framework-api:${rsf_version}"

    // Kyori Adventure
    compileOnly "net.kyori:adventure-platform-bukkit:4.4.1"
    compileOnly "net.kyori:adventure-text-minimessage:4.16.0"

    // Google/Apache
    compileOnly "com.google.code.gson:gson:2.13.1"
    compileOnly "com.google.guava:guava:33.4.8-jre"
    compileOnly "org.apache.commons:commons-lang3:3.18.0"

    // Dependency
    compileOnly "me.clip:placeholderapi:2.11.6"
    compileOnly "net.dmulloy2:ProtocolLib:5.1.0"

    // Lombok
    compileOnly "org.projectlombok:lombok:1.18.38"
    annotationProcessor "org.projectlombok:lombok:1.18.38"
}

jar {
    finalizedBy shadowJar
}

shadowJar {
    archiveClassifier.set("")
    doLast {
        copy {
            from archiveFile.get().asFile
            into file("$projectDir/builds")
        }
    }
}

java {
    def javaVersion = JavaVersion.toVersion(java_version as Integer)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(java_version as Integer)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.release = java_version as Integer
}

processResources {
    def split = api_version.split("\\.")
    def plugin_api_version = split[0] + "." + split[1]
    def props =
            [version: version, name: project.name, main: plugin_main, api_version: plugin_api_version, author: plugin_author]
    inputs.properties props
    filteringCharset "UTF-8"
    filesMatching("plugin.yml") {
        expand props
    }
}